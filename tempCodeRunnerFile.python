#! /usr/bin/env python3
# -*- coding: utf-8 -*-

# @Author: wzdnzd

import numpy as np


def simulate(n):
    # 圆心角θ所对应的弦长 l = 2 * R * sin(θ/2), R为圆的半径
    def compute(theta):
        if theta > np.pi:
            theta = 2 * np.pi - theta

        return 2 * np.sin(theta / 2)

    # 根据三角形三条边的平方关系判断是否是锐角、直角或钝角三角形
    def judge(array):
        if len(array) != 3:
            raise ValueError('len(array) must be 3.')

        if array[0] ** 2 + array[1] ** 2 > array[2] ** 2:
            return -1
        elif array[0] ** 2 + array[1] ** 2 == array[2] ** 2:
            return 0
        else:
            return 1

    acute, right, obtuse = 0, 0, 0
    for _ in range(n):
        angles = sorted(np.random.rand(3) * 2 * np.pi)
        chords = sorted([compute(angles[1] - angles[0]),
                         compute(angles[2] - angles[1]), 
                         compute(2 * np.pi + angles[0] - angles[2])])

        flag = judge(chords)
        if flag == -1:
            acute += 1
        elif flag == 0:
            right += 1
        else:
            obtuse += 1

    return [x / n for x in [acute, right, obtuse]]


if __name__ == "__main__":
    probabilities = simulate(100000)
    print('acute: {}\tright: {}\tobtuse: {}'.format(
        probabilities[0], probabilities[1], probabilities[2]))